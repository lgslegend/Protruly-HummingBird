/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */
package cn.com.protruly.filemanager.utils;

import android.util.Log;

import java.util.HashMap;
import java.util.Locale;
import cn.com.protruly.filemanager.enums.Category;
import cn.com.protruly.filemanager.utils.MediaFileType;
import cn.com.protruly.filemanager.R;

public class MediaFileUtil {

    private static final String TAG = "MediaFileUtil";

    public static final int FILE_TYPE_3GA = 0xb;
    public static final int FILE_TYPE_3GPA = 0x12d;
    public static final int FILE_TYPE_3GPP = 0x17;
    public static final int FILE_TYPE_3GPP2 = 0x18;
    public static final int FILE_TYPE_AAC = 0x8;
    public static final int FILE_TYPE_AC3 = 0x12e;
    public static final int FILE_TYPE_AMR = 0x4;
    public static final int FILE_TYPE_APE = 0x14;
    public static final int FILE_TYPE_APK = 0x75;
    public static final int FILE_TYPE_ASF = 0x1a;
    public static final int FILE_TYPE_AVI = 0x1d;
    public static final int FILE_TYPE_AWB = 0x5;
    public static final int FILE_TYPE_BMP = 0x22;
    public static final int FILE_TYPE_DASH = 0x2d;
    public static final int FILE_TYPE_DIVX = 0xc9;
    public static final int FILE_TYPE_DTS = 0x12c;
    public static final int FILE_TYPE_EC3 = 0x131;
    public static final int FILE_TYPE_F4V = 0xca;
    public static final int FILE_TYPE_FL = 0x33;
    public static final int FILE_TYPE_FLAC = 0xa;
    public static final int FILE_TYPE_FLV = 0xc9;
    public static final int FILE_TYPE_GIF = 0x20;
    public static final int FILE_TYPE_HTML = 0x65;
    public static final int FILE_TYPE_HTTPLIVE = 0x2c;
    public static final int FILE_TYPE_IMY = 0xd;
    public static final int FILE_TYPE_JPEG = 0x1f;
    public static final int FILE_TYPE_M3U = 0x29;
    public static final int FILE_TYPE_M4A = 0x2;
    public static final int FILE_TYPE_M4V = 0x16;
    public static final int FILE_TYPE_MID = 0xb;
    public static final int FILE_TYPE_MKA = 0x9;
    public static final int FILE_TYPE_MKV = 0x1b;
    public static final int FILE_TYPE_MOV = 0xce;
    public static final int FILE_TYPE_MP2PS = 0xc8;
    public static final int FILE_TYPE_MP2TS = 0x1c;
    public static final int FILE_TYPE_MP3 = 0x1;
    public static final int FILE_TYPE_MP4 = 0x15;
    private static final int FILE_TYPE_MS_CSV = 0x19a;
    public static final int FILE_TYPE_MS_DOC = 0x68;
    private static final int FILE_TYPE_MS_DOCM = 0x192;
    public static final int FILE_TYPE_MS_DOCX = 0x6b;
    private static final int FILE_TYPE_MS_DOT = 0x194;
    private static final int FILE_TYPE_MS_DOTM = 0x195;
    private static final int FILE_TYPE_MS_DOTX = 0x193;
    private static final int FILE_TYPE_MS_DPS = 0x1a2;
    private static final int FILE_TYPE_MS_DPT = 0x1a3;
    private static final int FILE_TYPE_MS_ET = 0x19d;
    private static final int FILE_TYPE_MS_ETT = 0x19e;
    private static final int FILE_TYPE_MS_MPT = 0x191;
    private static final int FILE_TYPE_MS_POT = 0x1a5;
    private static final int FILE_TYPE_MS_POTX = 0x1a4;
    private static final int FILE_TYPE_MS_PPS = 0x1a7;
    private static final int FILE_TYPE_MS_PPSX = 0x1a6;
    public static final int FILE_TYPE_MS_PPT = 0x6a;
    public static final int FILE_TYPE_MS_PPTX = 0x6c;
    private static final int FILE_TYPE_MS_RTF = 0x196;
    private static final int FILE_TYPE_MS_WPS = 0x190;
    public static final int FILE_TYPE_MS_XLS = 0x69;
    private static final int FILE_TYPE_MS_XLSB = 0x19c;
    private static final int FILE_TYPE_MS_XLSM = 0x1a0;
    public static final int FILE_TYPE_MS_XLSX = 0x6d;
    private static final int FILE_TYPE_MS_XLT = 0x199;
    private static final int FILE_TYPE_MS_XLTM = 0x1a1;
    private static final int FILE_TYPE_MS_XLTX = 0x19f;
    private static final int FILE_TYPE_MS_XPS = 0x198;
    public static final int FILE_TYPE_OGG = 0x7;
    public static final int FILE_TYPE_PCM = 0x130;
    public static final int FILE_TYPE_PDF = 0x66;
    public static final int FILE_TYPE_PLS = 0x2a;
    public static final int FILE_TYPE_PNG = 0x21;
    public static final int FILE_TYPE_QCP = 0x12f;
    public static final int FILE_TYPE_QT = 0xcd;
    public static final int FILE_TYPE_RAR = 0x74;
    public static final int FILE_TYPE_RM = 0xcb;
    public static final int FILE_TYPE_RMVB = 0xc8;
    public static final int FILE_TYPE_SMF = 0xc;
    public static final int FILE_TYPE_TEXT = 0x64;
    public static final int FILE_TYPE_TS = 0xcf;
    public static final int FILE_TYPE_VCF = 0x76;
    public static final int FILE_TYPE_VCS = 0x7a;
    public static final int FILE_TYPE_ICS = 0x7b;
    public static final int FILE_TYPE_VOB = 0xcc;
    public static final int FILE_TYPE_WAV = 0x3;
    public static final int FILE_TYPE_WBMP = 0x23;
    public static final int FILE_TYPE_WEBM = 0x1e;
    public static final int FILE_TYPE_WEBP = 0x24;
    public static final int FILE_TYPE_WMA = 0x6;
    public static final int FILE_TYPE_WMV = 0x19;
    public static final int FILE_TYPE_WPL = 0x2b;
    public static final int FILE_TYPE_XML = 0x67;
    public static final int FILE_TYPE_ZIP = 0x73;
    private static final int FIRST_AUDIO_FILE_TYPE = 0x1;
    private static final int FIRST_AUDIO_FILE_TYPE2 = 0x12c;
    private static final int FIRST_DRM_FILE_TYPE = 0x33;
    private static final int FIRST_IMAGE_FILE_TYPE = 0x1f;
    private static final int FIRST_MIDI_FILE_TYPE = 0xb;
    private static final int FIRST_PLAYLIST_FILE_TYPE = 0x29;
    private static final int FIRST_POPULAR_FILE_TYPE = 0x64;
    private static final int FIRST_VIDEO_FILE_TYPE = 0x15;
    private static final int FIRST_VIDEO_FILE_TYPE2 = 0xc8;
    private static final int FIRST_VIDEO_FILE_TYPE3 = 0xc8;
    private static final int LAST_AUDIO_FILE_TYPE = 0x14;
    private static final int LAST_AUDIO_FILE_TYPE2 = 0x131;
    private static final int LAST_DRM_FILE_TYPE = 0x33;
    private static final int LAST_IMAGE_FILE_TYPE = 0x24;
    private static final int LAST_MIDI_FILE_TYPE = 0xd;
    private static final int LAST_PLAYLIST_FILE_TYPE = 0x2d;
    private static final int LAST_POPULAR_FILE_TYPE = 0x6c;
    private static final int LAST_VIDEO_FILE_TYPE = 0x1e;
    private static final int LAST_VIDEO_FILE_TYPE2 = 0xc9;
    private static final int LAST_VIDEO_FILE_TYPE3 = 0xcf;
    private static final HashMap<String, MediaFileType> sFileTypeMap;
    private static final HashMap<String, Integer> sMimeTypeMap;
    
    public MediaFileUtil() {
    }
    
    static {
        sFileTypeMap = new HashMap<String, MediaFileType>();
        sMimeTypeMap = new HashMap<String, Integer>();
        //audio file
        addFileType("MP3", 0x1, "audio/mpeg");
        addFileType("MPGA", 0x1, "audio/mpeg");
        addFileType("M4A", 0x2, "audio/mp4");
        addFileType("WAV", 0x3, "audio/x-wav");
        addFileType("AMR", 0x4, "audio/amr");
        addFileType("AWB", 0x5, "audio/amr-wb");
        addFileType("WMA", 0x6, "audio/x-ms-wma");
        addFileType("OGG", 0x7, "audio/ogg");
        addFileType("AAC", 0x8, "audio/aac");
        addFileType("AAC", 0x8, "audio/aac-adts");
        addFileType("MKA", 0x9, "audio/x-matroska");
        addFileType("FLAC", 0xa, "audio/flac");
        addFileType("MID", 0xb, "audio/midi");
        addFileType("MIDI", 0xb, "audio/midi");
        addFileType("XMF", 0xb, "audio/midi");
        addFileType("RTTTL", 0xb, "audio/midi");
        addFileType("MXMF", 0xb, "audio/midi");
        addFileType("RTX", 0xb, "audio/midi");
        addFileType("OTA", 0xb, "audio/midi");
        addFileType("3GA", 0xb, "audio/ape");
        addFileType("SMF", 0xc, "audio/sp-midi");
        addFileType("IMY", 0xd, "audio/imelody");
        addFileType("APE", 0x14, "audio/ape");
        addFileType("M3U", 0x29, "audio/x-mpegurl");
        addFileType("PLS", 0x2a, "audio/x-scpls");
        addFileType("M3U8", 0x2c, "audio/mpegurl");
        addFileType("M3U8", 0x2c, "audio/x-mpegurl");
        addFileType("AC3", 0x12e, "audio/ac3");
        addFileType("QCP", 0x12f, "audio/qcelp");
        addFileType("WAV", 0x130, "audio/wav");
        addFileType("EC3", 0x131, "audio/eac3");
        //video file
        addFileType("MPEG", 0x15, "video/mpeg");
        addFileType("MPG", 0x15, "video/mpeg");
        addFileType("MP4", 0x15, "video/mp4");
        addFileType("M4V", 0x16, "video/mp4");
        addFileType("3GP", 0x17, "video/3gpp");
        addFileType("3GPP", 0x17, "video/3gpp");
        addFileType("3G2", 0x18, "video/3gpp2");
        addFileType("3GPP2", 0x18, "video/3gpp2");
        addFileType("WMV", 0x19, "video/x-ms-wmv");
        addFileType("ASF", 0x1a, "video/x-ms-asf");
        addFileType("MKV", 0x1b, "video/x-matroska");
        addFileType("TS", 0x1c, "video/mp2ts");
        addFileType("AVI", 0x1d, "video/avi");
        addFileType("AVI", 0x1d, "video/x-msvideo");
        addFileType("WEBM", 0x1e, "video/webm");
        addFileType("MPG", 0xc8, "video/mp2p");
        addFileType("RMVB", 0xc8, "video/rmvb");
        addFileType("MPEG", 0xc8, "video/mp2p");
        addFileType("DIVX", 0xc9, "video/divx");
        addFileType("FLV", 0xc9, "video/x-flv");
        addFileType("F4V", 0xca, "video/mp4");
        addFileType("RM", 0xcb, "video/x-pn-realvideo");
        addFileType("VOB", 0xcc, "video/mpeg");
        addFileType("QT", 0xcd, "video/quicktime");
        addFileType("MOV", 0xce, "video/mp4");
        addFileType("TS", 0xcf, "video/mp2ts");
        //image file
        addFileType("JPG", 0x1f, "image/jpeg");
        addFileType("JPEG", 0x1f, "image/jpeg");
        addFileType("GIF", 0x20, "image/gif");
        addFileType("PNG", 0x21, "image/png");
        addFileType("BMP", 0x22, "image/x-ms-bmp");
        addFileType("WBMP", 0x23, "image/vnd.wap.wbmp");
        addFileType("WEBP", 0x24, "image/webp");
        //other file
        addFileType("M3U", 0x29, "application/x-mpegurl");
        addFileType("WPL", 0x2b, "application/vnd.ms-wpl");
        addFileType("M3U8", 0x2c, "application/vnd.apple.mpegurl");
        addFileType("MPD", 0x2d, "application/dash+xml");
        addFileType("FL", 0x33, "application/x-android-drm-fl");
        addFileType("OGG", 0x7, "application/ogg");
        addFileType("OGA", 0x7, "application/ogg");
        addFileType("TXT", 0x64, "text/plain", R.drawable.text_icon);
        addFileType("XML", 0x67, "text/xml", R.drawable.document_icon);
        addFileType("HTM", 0x65, "text/html", R.drawable.document_icon);
        addFileType("HTML", 0x65, "text/html", R.drawable.document_icon);
        addFileType("PDF", 0x66, "application/pdf", R.drawable.pdf_icon);
        addFileType("DOC", 0x68, "application/msword", R.drawable.word_icon);
        addFileType("DOCX", 0x6b, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", R.drawable.word_icon);
        addFileType("XLS", 0x69, "application/vnd.ms-excel", R.drawable.excel_icon);
        addFileType("PPT", 0x6a, "application/vnd.ms-powerpoint", R.drawable.ppt_icon);
        addFileType("PPTX", 0x6c, "application/vnd.openxmlformats-officedocument.presentationml.presentation", R.drawable.ppt_icon);
        addFileType("XLSX", 0x6d, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", R.drawable.excel_icon);
        addFileType("WPS", 0x190, "application/kswps", R.drawable.word_icon);
        addFileType("WPT", 0x191, "application/wpt", R.drawable.word_icon);
        addFileType("DOCM", 0x192, "application/ms-word", R.drawable.word_icon);
        addFileType("DOTX", 0x193, "application/vnd.openxmlformats-officedocument.wordprocessingml.template", R.drawable.document_icon);
        addFileType("DOT", 0x194, "application/ms-word", R.drawable.document_icon);
        addFileType("DOTM", 0x195, "application/dotm", R.drawable.document_icon);
        addFileType("RTF", 0x196, "text/rtf", R.drawable.document_icon);
        addFileType("XPS", 0x198, "application/vnd.ms-xpsdocument", R.drawable.document_icon);
        addFileType("XLT", 0x199, "application/vnd.ms-excel", R.drawable.document_icon);
        addFileType("CSV", 0x19a, "text/csv", R.drawable.document_icon);
        addFileType("XLSB", 0x19c, "application/xlsb", R.drawable.document_icon);
        addFileType("ET", 0x19d, "application/et", R.drawable.document_icon);
        addFileType("ETT", 0x19e, "application/ett", R.drawable.document_icon);
        addFileType("XLTX", 0x19f, "application/vnd.openxmlformats-officedocument.spreadsheetml.template", R.drawable.document_icon);
        addFileType("XLSM", 0x1a0, "application/vnd.ms-excel.sheet.macroEnabled.12", R.drawable.document_icon);
        addFileType("XLTM", 0x1a1, "application/vnd.ms-excel.template.macroenabled.12", R.drawable.document_icon);
        addFileType("DPS", 0x1a2, "application/ksdps", R.drawable.document_icon);
        addFileType("DPT", 0x1a3, "application/dpt", R.drawable.document_icon);
        addFileType("POTX", 0x1a4, "application/vnd.openxmlformats-officedocument.presentationml.template", R.drawable.document_icon);
        addFileType("POT", 0x1a5, "application/vnd.ms-powerpoint", R.drawable.document_icon);
        addFileType("PPSX", 0x1a6, "application/vnd.openxmlformats-officedocument.presentationml.slideshow", R.drawable.document_icon);
        addFileType("PPS", 0x1a7, "application/vnd.ms-powerpoint", R.drawable.document_icon);
        addFileType("ZIP", 0x73, "application/zip", R.drawable.zip_icon);
        addFileType("RAR", 0x74, "application/rar", R.drawable.zip_icon);
        addFileType("APK", 0x75, "application/vnd.android.package-archive", R.drawable.apk_icon);
        addFileType("VCF", 0x76, "text/x-vcard", R.drawable.document_icon);
        //cert file
        addFileType("CER", 0x77, "application/pkix-cert",R.drawable.document_icon);
        addFileType("CER", 0x77, "application/x-x509-ca-cert",R.drawable.document_icon);
        addFileType("CER", 0x77, "application/x-x509-user-cert",R.drawable.document_icon);
        addFileType("CER", 0x77, "application/x-x509-server-cert",R.drawable.document_icon);
        addFileType("P12", 0x78, "application/x-pkcs12",R.drawable.document_icon);
        addFileType("PFX", 0x79, "application/x-wifi-config",R.drawable.document_icon);
        //calender file
        addFileType("VCS", 0x7a, "text/x-vcalendar",R.drawable.document_icon);
        addFileType("ICS", 0x7b, "text/calendar",R.drawable.document_icon);
    }

    private static void addFileType(String extension, int fileType, String mimeType) {
        MediaFileType mediaFileType = new MediaFileType(fileType, mimeType);
        if(isAudioFileType(fileType)) {
            mediaFileType.mIconRes = Integer.valueOf(R.drawable.music_icon);
        } else if(isImageFileType(fileType)) {
            mediaFileType.mIconRes = Integer.valueOf(R.drawable.picture_icon);
        } else if(isVideoFileType(fileType)) {
            mediaFileType.mIconRes = Integer.valueOf(R.drawable.video_icon);
        }
        sFileTypeMap.put(extension, mediaFileType);
        sMimeTypeMap.put(mimeType, fileType);
    }
    
    private static void addFileType(String extension, int fileType, String mimeType, int iconRes) {
        sFileTypeMap.put(extension, new MediaFileType(fileType, mimeType, iconRes));
        sMimeTypeMap.put(mimeType, fileType);
    }

    public static boolean isCalendarFileType(int fileType){
        return ((fileType == 0x7a) || (fileType == 0x7b));
    }

    public static boolean isCertinstallerFileType(int fileType) {
        return ((fileType >= 0x77) && (fileType <= 0x79));
    }
    
    public static boolean isAudioFileType(int fileType) {
        return ((fileType >= 0x1) && (fileType <= 0xd))
                || ((fileType >= 0x29) && (fileType <= 0x2c))
                || ((fileType >= 0x12e) && (fileType <= 0x131))||fileType == 0x14;
    }
    
    public static boolean isVideoFileType(int fileType) {
        return ((fileType >= 0x15) && (fileType <= 0x1e)
         || (fileType >= 0xc8) && (fileType <= 0xcf));
    }
    
    public static boolean isPopularFileType(int fileType) {
        return ((fileType >= 0x64) && (fileType <= 0x6c));
    }
    
    public static boolean isImageFileType(int fileType) {
        return ((fileType >= 0x1f) && (fileType <= 0x24));
    }
    
    public static boolean isApkFileType(int fileType) {
        return (fileType == 0x75);
    }
    
    public static boolean isZipFileType(int fileType) {
        return (fileType == 0x73);
    }

    public static boolean isTxtFileType(int fileType) { return (fileType == 0x64); }

    public static boolean isWordFileType(int fileType) { return (fileType == 0x68 || fileType == 0x6b); }

    public static boolean isExcelFileType(int fileType) { return (fileType == 0x69 || fileType == 0x6d); }

    public static boolean isPPTFileType(int fileType) { return (fileType == 0x6a || fileType == 0x6c); }

    public static boolean isPdfFileType(int fileType) { return (fileType == 0x66); }
    
    public static boolean isVcfFileType(int fileType) { return (fileType == 0x76); }
    
    public static String getTypeSet(int category) {
        switch(category) {
            case Category.Document: {
                //return " (mime_type = 'application/msword' or mime_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' or mime_type = 'application/vnd.ms-excel' or mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or mime_type = 'text/html'  or mime_type = 'application/mspowerpoint' or mime_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation' or mime_type = 'text/plain' or mime_type = 'application/pdf' or _data like '%.pptx' or _data like '%.docx' or _data like '%.xlsx' or _data like '%.ppx')";
                return " (mime_type = 'application/msword' or mime_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' or mime_type = 'application/vnd.ms-excel' or mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or mime_type = 'text/html' or mime_type = 'application/vnd.ms-powerpoint' or mime_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation' or mime_type = 'text/plain' or mime_type = 'application/pdf')";
            }
            case Category.Video: {
                return " (mime_type like 'video/%' ) ";
            }
            case Category.Zip: {
                return " (mime_type = 'application/zip') ";
            }
            case Category.Apk: {
                //return " (_data like '%.apk') ";
                return " (mime_type = 'application/vnd.android.package-archive' or  _data like '%.apk') ";
                //return " (mime_type = 'application/vnd.android.package-archive') ";
            }
            case Category.Picture: {
                return " (mime_type like 'image/%' ) AND (_size > 10240) ";
            }
            case Category.Music: {
                return " (mime_type like 'audio/%' or mime_type = 'application/ogg') ";
            }
            case Category.History: {
                return " (mime_type like 'audio/%' or mime_type like 'image/%' or mime_type = 'application/vnd.android.package-archive' or mime_type = 'application/zip'" +
                        "or mime_type = 'application/msword' or mime_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' " +
                        "or mime_type = 'application/vnd.ms-excel' or mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' " +
                        "or mime_type = 'application/mspowerpoint' or mime_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation' " +
                        "or mime_type like 'video/%' or mime_type = 'text/plain' or mime_type = 'application/pdf' or mime_type = 'text/html')";
            }
        }
        return "";
    }
    
    public static boolean isPlayListFileType(int fileType) {
        return ((fileType >= 0x29) && (fileType <= 0x2d));
    }
    
    public static boolean isDrmFileType(int fileType) {
        return ((fileType >= 0x33) && (fileType <= 0x33));
    }
    
    public static MediaFileType getFileType(String path) {
        int lastDot = path.lastIndexOf(".");
        if(lastDot < 0) {
            return null;
        }
        return (MediaFileType)sFileTypeMap.get(path.substring((lastDot + 1)).toUpperCase(Locale.ROOT));
    }
    
    public static boolean isMimeTypeMedia(String mimeType) {
        int fileTYpe = getFileTypeForMimeType(mimeType);
        /*
        LogUtil.i(TAG, "isMimeTypeMedia fileTYpe:" + fileTYpe +
                " isAudioFileType:" + isAudioFileType(fileTYpe) +
                " isVideoFileType:" + isVideoFileType(fileTYpe) +
                " isImageFileType:" + isImageFileType(fileTYpe) +
                " isPlayListFileType:" + isPlayListFileType(fileTYpe));
        */
        return isAudioFileType(fileTYpe) || isVideoFileType(fileTYpe)
                ||isImageFileType(fileTYpe)||isPlayListFileType(fileTYpe);
    }
    
    public static String getFileTitle(String path) {
        int lastSlash = path.lastIndexOf(0x2f);
        if(lastSlash >= 0) {
            lastSlash = lastSlash + 0x1;
            if(lastSlash < path.length()) {
                path = path.substring(lastSlash);
            }
        }
        int lastDot = path.lastIndexOf(0x2e);
        if(lastDot > 0) {
            path = path.substring(0x0, lastDot);
        }
        return path;
    }
    
    public static int getFileTypeForMimeType(String mimeType) {
        Integer value = sMimeTypeMap.get(mimeType);
        return value == null ? 0x0 : value.intValue();
    }
    
    public static String getMimeTypeForFile(String path) {
        try{
            MediaFileType mediaFileType = getFileType(path);
            return mediaFileType.mMimeType;
        }catch(Exception e){

        }
        return null;
    }
}
